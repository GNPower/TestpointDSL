
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003888  08003888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e0  080038e0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038e8  080038e8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080038f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003958  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003958  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8fe  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019bc  00000000  00000000  0002aa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000722  00000000  00000000  0002cd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225f4  00000000  00000000  0002d45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1ba  00000000  00000000  0004fa4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cef33  00000000  00000000  0005ac08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b88  00000000  00000000  00129b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  0012c6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003870 	.word	0x08003870

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08003870 	.word	0x08003870

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa9a 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f80e 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f88e 	bl	80005fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f85c 	bl	800059c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello World!\n");
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <main+0x24>)
 80004e6:	f002 fe2d 	bl	8003144 <puts>
	  HAL_Delay(1000);
 80004ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ee:	f000 fb09 	bl	8000b04 <HAL_Delay>
	  printf("Hello World!\n");
 80004f2:	e7f7      	b.n	80004e4 <main+0x14>
 80004f4:	08003888 	.word	0x08003888

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	; 0x58
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2244      	movs	r2, #68	; 0x44
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fefc 	bl	8003304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051e:	f000 fd9b 	bl	8001058 <HAL_PWREx_ControlVoltageScaling>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000528:	f000 f8e0 	bl	80006ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2340      	movs	r3, #64	; 0x40
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800054a:	2307      	movs	r3, #7
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054e:	2302      	movs	r3, #2
 8000550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fdd2 	bl	8001104 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000566:	f000 f8c1 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2303      	movs	r3, #3
 8000570:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f9d2 	bl	800192c <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 f8ad 	bl	80006ec <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3758      	adds	r7, #88	; 0x58
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <MX_USART2_UART_Init+0x5c>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005e0:	f001 ff26 	bl	8002430 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 f87f 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000084 	.word	0x20000084
 80005f8:	40004400 	.word	0x40004400

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <MX_GPIO_Init+0xc4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f000 fcc7 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000684:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <MX_GPIO_Init+0xc8>)
 8000696:	f000 fb3f 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800069a:	2320      	movs	r3, #32
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f000 fb30 	bl	8000d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000800 	.word	0x48000800

080006c8 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80006d0:	1d39      	adds	r1, r7, #4
 80006d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d6:	2201      	movs	r2, #1
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <__io_putchar+0x20>)
 80006da:	f001 fef7 	bl	80024cc <HAL_UART_Transmit>

	return ch;
 80006de:	687b      	ldr	r3, [r7, #4]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000084 	.word	0x20000084

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <HAL_MspInit+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6613      	str	r3, [r2, #96]	; 0x60
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_MspInit+0x44>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <HAL_MspInit+0x44>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_MspInit+0x44>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b0a4      	sub	sp, #144	; 0x90
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2268      	movs	r2, #104	; 0x68
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fdcf 	bl	8003304 <memset>
  if(huart->Instance==USART2)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <HAL_UART_MspInit+0xb0>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d13a      	bne.n	80007e6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000770:	2302      	movs	r3, #2
 8000772:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4618      	mov	r0, r3
 800077e:	f001 faf9 	bl	8001d74 <HAL_RCCEx_PeriphCLKConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000788:	f7ff ffb0 	bl	80006ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 800078e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000790:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 8000792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000796:	6593      	str	r3, [r2, #88]	; 0x58
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 800079a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a8:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <HAL_UART_MspInit+0xb4>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007bc:	230c      	movs	r3, #12
 80007be:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d2:	2307      	movs	r3, #7
 80007d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 fa99 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007e6:	bf00      	nop
 80007e8:	3790      	adds	r7, #144	; 0x90
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40004400 	.word	0x40004400
 80007f4:	40021000 	.word	0x40021000

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f93e 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	e00a      	b.n	8000874 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800085e:	f3af 8000 	nop.w
 8000862:	4601      	mov	r1, r0
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf0      	blt.n	800085e <_read+0x12>
  }

  return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e009      	b.n	80008ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	60ba      	str	r2, [r7, #8]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff11 	bl	80006c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3301      	adds	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	dbf1      	blt.n	8000898 <_write+0x12>
  }
  return len;
 80008b4:	687b      	ldr	r3, [r7, #4]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <_close>:

int _close(int file)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e6:	605a      	str	r2, [r3, #4]
  return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <_isatty>:

int _isatty(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f002 fd22 	bl	80033a0 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20028000 	.word	0x20028000
 8000988:	00000400 	.word	0x00000400
 800098c:	2000010c 	.word	0x2000010c
 8000990:	20000260 	.word	0x20000260

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff ffea 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 fce1 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fd71 	bl	80004d0 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f0:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009fc:	080038f0 	.word	0x080038f0
  ldr r2, =_sbss
 8000a00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a04:	20000260 	.word	0x20000260

08000a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_Init+0x3c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_Init+0x3c>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 f944 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f80f 	bl	8000a4c <HAL_InitTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	e001      	b.n	8000a3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3a:	f7ff fe5d 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d023      	beq.n	8000aa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_InitTick+0x70>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_InitTick+0x6c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f941 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10f      	bne.n	8000aa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d809      	bhi.n	8000a9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f919 	bl	8000cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_InitTick+0x74>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e004      	b.n	8000aac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e001      	b.n	8000aac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000110 	.word	0x20000110

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000110 	.word	0x20000110

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff47 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff5c 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff8e 	bl	8000c04 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffb0 	bl	8000c6c <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e154      	b.n	8000fd2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8146 	beq.w	8000fcc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d005      	beq.n	8000d58 <HAL_GPIO_Init+0x40>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0201 	and.w	r2, r3, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d017      	beq.n	8000df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d123      	bne.n	8000e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	691a      	ldr	r2, [r3, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	6939      	ldr	r1, [r7, #16]
 8000e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0203 	and.w	r2, r3, #3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80a0 	beq.w	8000fcc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e90:	4a57      	ldr	r2, [pc, #348]	; (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6613      	str	r3, [r2, #96]	; 0x60
 8000e98:	4b55      	ldr	r3, [pc, #340]	; (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea4:	4a53      	ldr	r2, [pc, #332]	; (8000ff4 <HAL_GPIO_Init+0x2dc>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ece:	d019      	beq.n	8000f04 <HAL_GPIO_Init+0x1ec>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a49      	ldr	r2, [pc, #292]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d013      	beq.n	8000f00 <HAL_GPIO_Init+0x1e8>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_GPIO_Init+0x2e4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00d      	beq.n	8000efc <HAL_GPIO_Init+0x1e4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a47      	ldr	r2, [pc, #284]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a46      	ldr	r2, [pc, #280]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d101      	bne.n	8000ef4 <HAL_GPIO_Init+0x1dc>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	e008      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e004      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f04:	2300      	movs	r3, #0
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f16:	4937      	ldr	r1, [pc, #220]	; (8000ff4 <HAL_GPIO_Init+0x2dc>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f24:	4b38      	ldr	r3, [pc, #224]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f72:	4a25      	ldr	r2, [pc, #148]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f47f aea3 	bne.w	8000d28 <HAL_GPIO_Init+0x10>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	48000800 	.word	0x48000800
 8001000:	48000c00 	.word	0x48000c00
 8001004:	48001000 	.word	0x48001000
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001028:	e002      	b.n	8001030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <HAL_PWREx_GetVoltageRange+0x18>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40007000 	.word	0x40007000

08001058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001066:	d130      	bne.n	80010ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001074:	d038      	beq.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800107e:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001080:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001084:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2232      	movs	r2, #50	; 0x32
 800108c:	fb02 f303 	mul.w	r3, r2, r3
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	0c9b      	lsrs	r3, r3, #18
 8001098:	3301      	adds	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800109c:	e002      	b.n	80010a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b0:	d102      	bne.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f2      	bne.n	800109e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c4:	d110      	bne.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e00f      	b.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d6:	d007      	beq.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010e0:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40007000 	.word	0x40007000
 80010fc:	20000000 	.word	0x20000000
 8001100:	431bde83 	.word	0x431bde83

08001104 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	f000 bc02 	b.w	800191c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001118:	4b96      	ldr	r3, [pc, #600]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001122:	4b94      	ldr	r3, [pc, #592]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80e4 	beq.w	8001302 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <HAL_RCC_OscConfig+0x4c>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b0c      	cmp	r3, #12
 8001144:	f040 808b 	bne.w	800125e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b01      	cmp	r3, #1
 800114c:	f040 8087 	bne.w	800125e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001150:	4b88      	ldr	r3, [pc, #544]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <HAL_RCC_OscConfig+0x64>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e3d9      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	4b81      	ldr	r3, [pc, #516]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <HAL_RCC_OscConfig+0x7e>
 8001178:	4b7e      	ldr	r3, [pc, #504]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001180:	e005      	b.n	800118e <HAL_RCC_OscConfig+0x8a>
 8001182:	4b7c      	ldr	r3, [pc, #496]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 8001184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800118e:	4293      	cmp	r3, r2
 8001190:	d223      	bcs.n	80011da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fd8c 	bl	8001cb4 <RCC_SetFlashLatencyFromMSIRange>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e3ba      	b.n	800191c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a6:	4b73      	ldr	r3, [pc, #460]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a72      	ldr	r2, [pc, #456]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b70      	ldr	r3, [pc, #448]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	496d      	ldr	r1, [pc, #436]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011c4:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	4968      	ldr	r1, [pc, #416]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
 80011d8:	e025      	b.n	8001226 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011da:	4b66      	ldr	r3, [pc, #408]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a65      	ldr	r2, [pc, #404]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b63      	ldr	r3, [pc, #396]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4960      	ldr	r1, [pc, #384]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f8:	4b5e      	ldr	r3, [pc, #376]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	495b      	ldr	r1, [pc, #364]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fd4c 	bl	8001cb4 <RCC_SetFlashLatencyFromMSIRange>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e37a      	b.n	800191c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001226:	f000 fc81 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 800122a:	4602      	mov	r2, r0
 800122c:	4b51      	ldr	r3, [pc, #324]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	4950      	ldr	r1, [pc, #320]	; (8001378 <HAL_RCC_OscConfig+0x274>)
 8001238:	5ccb      	ldrb	r3, [r1, r3]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	fa22 f303 	lsr.w	r3, r2, r3
 8001242:	4a4e      	ldr	r2, [pc, #312]	; (800137c <HAL_RCC_OscConfig+0x278>)
 8001244:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001246:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fbfe 	bl	8000a4c <HAL_InitTick>
 8001250:	4603      	mov	r3, r0
 8001252:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d052      	beq.n	8001300 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	e35e      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d032      	beq.n	80012cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001266:	4b43      	ldr	r3, [pc, #268]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a42      	ldr	r2, [pc, #264]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001272:	f7ff fc3b 	bl	8000aec <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800127a:	f7ff fc37 	bl	8000aec <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e347      	b.n	800191c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800128c:	4b39      	ldr	r3, [pc, #228]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a35      	ldr	r2, [pc, #212]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b33      	ldr	r3, [pc, #204]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4930      	ldr	r1, [pc, #192]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	492b      	ldr	r1, [pc, #172]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
 80012ca:	e01a      	b.n	8001302 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a28      	ldr	r2, [pc, #160]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fc08 	bl	8000aec <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e0:	f7ff fc04 	bl	8000aec <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e314      	b.n	800191c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x1dc>
 80012fe:	e000      	b.n	8001302 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001300:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d073      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	2b08      	cmp	r3, #8
 8001312:	d005      	beq.n	8001320 <HAL_RCC_OscConfig+0x21c>
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2b0c      	cmp	r3, #12
 8001318:	d10e      	bne.n	8001338 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d10b      	bne.n	8001338 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d063      	beq.n	80013f4 <HAL_RCC_OscConfig+0x2f0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d15f      	bne.n	80013f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e2f1      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d106      	bne.n	8001350 <HAL_RCC_OscConfig+0x24c>
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e025      	b.n	800139c <HAL_RCC_OscConfig+0x298>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001358:	d114      	bne.n	8001384 <HAL_RCC_OscConfig+0x280>
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a02      	ldr	r2, [pc, #8]	; (8001374 <HAL_RCC_OscConfig+0x270>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e013      	b.n	800139c <HAL_RCC_OscConfig+0x298>
 8001374:	40021000 	.word	0x40021000
 8001378:	08003898 	.word	0x08003898
 800137c:	20000000 	.word	0x20000000
 8001380:	20000004 	.word	0x20000004
 8001384:	4ba0      	ldr	r3, [pc, #640]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a9f      	ldr	r2, [pc, #636]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b9d      	ldr	r3, [pc, #628]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a9c      	ldr	r2, [pc, #624]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fba2 	bl	8000aec <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fb9e 	bl	8000aec <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e2ae      	b.n	800191c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013be:	4b92      	ldr	r3, [pc, #584]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x2a8>
 80013ca:	e014      	b.n	80013f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb8e 	bl	8000aec <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fb8a 	bl	8000aec <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e29a      	b.n	800191c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e6:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2d0>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d060      	beq.n	80014c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b04      	cmp	r3, #4
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x310>
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d119      	bne.n	8001442 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d116      	bne.n	8001442 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001414:	4b7c      	ldr	r3, [pc, #496]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_OscConfig+0x328>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e277      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b76      	ldr	r3, [pc, #472]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	061b      	lsls	r3, r3, #24
 800143a:	4973      	ldr	r1, [pc, #460]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001440:	e040      	b.n	80014c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d023      	beq.n	8001492 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144a:	4b6f      	ldr	r3, [pc, #444]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6e      	ldr	r2, [pc, #440]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fb49 	bl	8000aec <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fb45 	bl	8000aec <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e255      	b.n	800191c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001470:	4b65      	ldr	r3, [pc, #404]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b62      	ldr	r3, [pc, #392]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	495f      	ldr	r1, [pc, #380]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
 8001490:	e018      	b.n	80014c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b5d      	ldr	r3, [pc, #372]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a5c      	ldr	r2, [pc, #368]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800149c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff fb25 	bl	8000aec <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fb21 	bl	8000aec <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e231      	b.n	800191c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b8:	4b53      	ldr	r3, [pc, #332]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d03c      	beq.n	800154a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01c      	beq.n	8001512 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d8:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80014da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014de:	4a4a      	ldr	r2, [pc, #296]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fb00 	bl	8000aec <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fafc 	bl	8000aec <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e20c      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ef      	beq.n	80014f0 <HAL_RCC_OscConfig+0x3ec>
 8001510:	e01b      	b.n	800154a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001518:	4a3b      	ldr	r2, [pc, #236]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff fae3 	bl	8000aec <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fadf 	bl	8000aec <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1ef      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800153e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1ef      	bne.n	800152a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 80a6 	beq.w	80016a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800155c:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10d      	bne.n	8001584 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	4a26      	ldr	r2, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001572:	6593      	str	r3, [r2, #88]	; 0x58
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001580:	2301      	movs	r3, #1
 8001582:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_RCC_OscConfig+0x508>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d118      	bne.n	80015c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_RCC_OscConfig+0x508>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_RCC_OscConfig+0x508>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159c:	f7ff faa6 	bl	8000aec <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a4:	f7ff faa2 	bl	8000aec <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1b2      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_RCC_OscConfig+0x508>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <HAL_RCC_OscConfig+0x4d8>
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80015cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015da:	e029      	b.n	8001630 <HAL_RCC_OscConfig+0x52c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d115      	bne.n	8001610 <HAL_RCC_OscConfig+0x50c>
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fa:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_RCC_OscConfig+0x504>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001604:	e014      	b.n	8001630 <HAL_RCC_OscConfig+0x52c>
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	40007000 	.word	0x40007000
 8001610:	4b9a      	ldr	r3, [pc, #616]	; (800187c <HAL_RCC_OscConfig+0x778>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	4a99      	ldr	r2, [pc, #612]	; (800187c <HAL_RCC_OscConfig+0x778>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001620:	4b96      	ldr	r3, [pc, #600]	; (800187c <HAL_RCC_OscConfig+0x778>)
 8001622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001626:	4a95      	ldr	r2, [pc, #596]	; (800187c <HAL_RCC_OscConfig+0x778>)
 8001628:	f023 0304 	bic.w	r3, r3, #4
 800162c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d016      	beq.n	8001666 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff fa58 	bl	8000aec <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800163e:	e00a      	b.n	8001656 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001640:	f7ff fa54 	bl	8000aec <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f241 3288 	movw	r2, #5000	; 0x1388
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e162      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001656:	4b89      	ldr	r3, [pc, #548]	; (800187c <HAL_RCC_OscConfig+0x778>)
 8001658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ed      	beq.n	8001640 <HAL_RCC_OscConfig+0x53c>
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7ff fa41 	bl	8000aec <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800166c:	e00a      	b.n	8001684 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166e:	f7ff fa3d 	bl	8000aec <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f241 3288 	movw	r2, #5000	; 0x1388
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e14b      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001684:	4b7d      	ldr	r3, [pc, #500]	; (800187c <HAL_RCC_OscConfig+0x778>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ed      	bne.n	800166e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001692:	7ffb      	ldrb	r3, [r7, #31]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001698:	4b78      	ldr	r3, [pc, #480]	; (800187c <HAL_RCC_OscConfig+0x778>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	4a77      	ldr	r2, [pc, #476]	; (800187c <HAL_RCC_OscConfig+0x778>)
 800169e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03c      	beq.n	800172a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016b8:	4b70      	ldr	r3, [pc, #448]	; (800187c <HAL_RCC_OscConfig+0x778>)
 80016ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016be:	4a6f      	ldr	r2, [pc, #444]	; (800187c <HAL_RCC_OscConfig+0x778>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fa10 	bl	8000aec <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016d0:	f7ff fa0c 	bl	8000aec <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e11c      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016e2:	4b66      	ldr	r3, [pc, #408]	; (800187c <HAL_RCC_OscConfig+0x778>)
 80016e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ef      	beq.n	80016d0 <HAL_RCC_OscConfig+0x5cc>
 80016f0:	e01b      	b.n	800172a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016f2:	4b62      	ldr	r3, [pc, #392]	; (800187c <HAL_RCC_OscConfig+0x778>)
 80016f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f8:	4a60      	ldr	r2, [pc, #384]	; (800187c <HAL_RCC_OscConfig+0x778>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff f9f3 	bl	8000aec <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800170a:	f7ff f9ef 	bl	8000aec <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0ff      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800171c:	4b57      	ldr	r3, [pc, #348]	; (800187c <HAL_RCC_OscConfig+0x778>)
 800171e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ef      	bne.n	800170a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80f3 	beq.w	800191a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	2b02      	cmp	r3, #2
 800173a:	f040 80c9 	bne.w	80018d0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800173e:	4b4f      	ldr	r3, [pc, #316]	; (800187c <HAL_RCC_OscConfig+0x778>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0203 	and.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	429a      	cmp	r2, r3
 8001750:	d12c      	bne.n	80017ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	3b01      	subs	r3, #1
 800175e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d123      	bne.n	80017ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d11b      	bne.n	80017ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d113      	bne.n	80017ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178e:	085b      	lsrs	r3, r3, #1
 8001790:	3b01      	subs	r3, #1
 8001792:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d109      	bne.n	80017ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	085b      	lsrs	r3, r3, #1
 80017a4:	3b01      	subs	r3, #1
 80017a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d06b      	beq.n	8001884 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d062      	beq.n	8001878 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_RCC_OscConfig+0x778>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0ac      	b.n	800191c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_RCC_OscConfig+0x778>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a2d      	ldr	r2, [pc, #180]	; (800187c <HAL_RCC_OscConfig+0x778>)
 80017c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017ce:	f7ff f98d 	bl	8000aec <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f989 	bl	8000aec <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e099      	b.n	800191c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_OscConfig+0x778>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_RCC_OscConfig+0x778>)
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_RCC_OscConfig+0x77c>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001804:	3a01      	subs	r2, #1
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800180e:	0212      	lsls	r2, r2, #8
 8001810:	4311      	orrs	r1, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001816:	0852      	lsrs	r2, r2, #1
 8001818:	3a01      	subs	r2, #1
 800181a:	0552      	lsls	r2, r2, #21
 800181c:	4311      	orrs	r1, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001822:	0852      	lsrs	r2, r2, #1
 8001824:	3a01      	subs	r2, #1
 8001826:	0652      	lsls	r2, r2, #25
 8001828:	4311      	orrs	r1, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800182e:	06d2      	lsls	r2, r2, #27
 8001830:	430a      	orrs	r2, r1
 8001832:	4912      	ldr	r1, [pc, #72]	; (800187c <HAL_RCC_OscConfig+0x778>)
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x778>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_RCC_OscConfig+0x778>)
 800183e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_RCC_OscConfig+0x778>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a0c      	ldr	r2, [pc, #48]	; (800187c <HAL_RCC_OscConfig+0x778>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001850:	f7ff f94c 	bl	8000aec <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff f948 	bl	8000aec <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e058      	b.n	800191c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <HAL_RCC_OscConfig+0x778>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001876:	e050      	b.n	800191a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e04f      	b.n	800191c <HAL_RCC_OscConfig+0x818>
 800187c:	40021000 	.word	0x40021000
 8001880:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d144      	bne.n	800191a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a23      	ldr	r2, [pc, #140]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a20      	ldr	r2, [pc, #128]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 80018a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a8:	f7ff f920 	bl	8000aec <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff f91c 	bl	8000aec <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e02c      	b.n	800191c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x7ac>
 80018ce:	e024      	b.n	800191a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d01f      	beq.n	8001916 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 80018dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff f903 	bl	8000aec <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff f8ff 	bl	8000aec <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e00f      	b.n	800191c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4905      	ldr	r1, [pc, #20]	; (8001924 <HAL_RCC_OscConfig+0x820>)
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x824>)
 8001910:	4013      	ands	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
 8001914:	e001      	b.n	800191a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	feeefffc 	.word	0xfeeefffc

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0e7      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b75      	ldr	r3, [pc, #468]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b72      	ldr	r3, [pc, #456]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0207 	bic.w	r2, r3, #7
 8001956:	4970      	ldr	r1, [pc, #448]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b6e      	ldr	r3, [pc, #440]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0cf      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d010      	beq.n	800199e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001988:	429a      	cmp	r2, r3
 800198a:	d908      	bls.n	800199e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4960      	ldr	r1, [pc, #384]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d04c      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d121      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0a6      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ca:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e09a      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e08e      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e086      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4943      	ldr	r1, [pc, #268]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a14:	f7ff f86a 	bl	8000aec <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff f866 	bl	8000aec <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e06e      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d010      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d208      	bcs.n	8001a72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	492b      	ldr	r1, [pc, #172]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d210      	bcs.n	8001aa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 0207 	bic.w	r2, r3, #7
 8001a88:	4923      	ldr	r1, [pc, #140]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e036      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4918      	ldr	r1, [pc, #96]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4910      	ldr	r1, [pc, #64]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae0:	f000 f824 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	490b      	ldr	r1, [pc, #44]	; (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1fc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe ffa1 	bl	8000a4c <HAL_InitTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08003898 	.word	0x08003898
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d121      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d11e      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e005      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b88:	4a2b      	ldr	r2, [pc, #172]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	e004      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d134      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d003      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001bd0:	e005      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd4:	617b      	str	r3, [r7, #20]
      break;
 8001bd6:	e005      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bda:	617b      	str	r3, [r7, #20]
      break;
 8001bdc:	e002      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	617b      	str	r3, [r7, #20]
      break;
 8001be2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	3301      	adds	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	0e5b      	lsrs	r3, r3, #25
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	3301      	adds	r3, #1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c24:	69bb      	ldr	r3, [r7, #24]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	080038b0 	.word	0x080038b0
 8001c3c:	00f42400 	.word	0x00f42400
 8001c40:	007a1200 	.word	0x007a1200

08001c44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000000 	.word	0x20000000

08001c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c60:	f7ff fff0 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4904      	ldr	r1, [pc, #16]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	080038a8 	.word	0x080038a8

08001c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c8c:	f7ff ffda 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0adb      	lsrs	r3, r3, #11
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4904      	ldr	r1, [pc, #16]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	080038a8 	.word	0x080038a8

08001cb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ccc:	f7ff f9b6 	bl	800103c <HAL_PWREx_GetVoltageRange>
 8001cd0:	6178      	str	r0, [r7, #20]
 8001cd2:	e014      	b.n	8001cfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cec:	f7ff f9a6 	bl	800103c <HAL_PWREx_GetVoltageRange>
 8001cf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d04:	d10b      	bne.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b80      	cmp	r3, #128	; 0x80
 8001d0a:	d919      	bls.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d10:	d902      	bls.n	8001d18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d12:	2302      	movs	r3, #2
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	e013      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d18:	2301      	movs	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	e010      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d902      	bls.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d24:	2303      	movs	r3, #3
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e00a      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d102      	bne.n	8001d36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	e004      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b70      	cmp	r3, #112	; 0x70
 8001d3a:	d101      	bne.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 0207 	bic.w	r2, r3, #7
 8001d48:	4909      	ldr	r1, [pc, #36]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40022000 	.word	0x40022000

08001d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d80:	2300      	movs	r3, #0
 8001d82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d031      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d98:	d01a      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001d9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d9e:	d814      	bhi.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d009      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001da4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001da8:	d10f      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001daa:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001db6:	e00c      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fa44 	bl	800224c <RCCEx_PLLSAI1_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dc8:	e003      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	74fb      	strb	r3, [r7, #19]
      break;
 8001dce:	e000      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dd2:	7cfb      	ldrb	r3, [r7, #19]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dd8:	4b51      	ldr	r3, [pc, #324]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	494e      	ldr	r1, [pc, #312]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dee:	e001      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 809e 	beq.w	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	4a3f      	ldr	r2, [pc, #252]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e26:	6593      	str	r3, [r2, #88]	; 0x58
 8001e28:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e34:	2301      	movs	r3, #1
 8001e36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e38:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a39      	ldr	r2, [pc, #228]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e44:	f7fe fe52 	bl	8000aec <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e4a:	e009      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4c:	f7fe fe4e 	bl	8000aec <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d902      	bls.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	74fb      	strb	r3, [r7, #19]
        break;
 8001e5e:	e005      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ef      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d15a      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01e      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d019      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e8e:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e9a:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001eba:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d016      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fe0e 	bl	8000aec <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed2:	e00b      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed4:	f7fe fe0a 	bl	8000aec <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d902      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	74fb      	strb	r3, [r7, #19]
            break;
 8001eea:	e006      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0ec      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f0e:	4904      	ldr	r1, [pc, #16]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f16:	e009      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	74bb      	strb	r3, [r7, #18]
 8001f1c:	e006      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f2c:	7c7b      	ldrb	r3, [r7, #17]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f32:	4b9e      	ldr	r3, [pc, #632]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	4a9d      	ldr	r2, [pc, #628]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f4a:	4b98      	ldr	r3, [pc, #608]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f50:	f023 0203 	bic.w	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4994      	ldr	r1, [pc, #592]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f6c:	4b8f      	ldr	r3, [pc, #572]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	f023 020c 	bic.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	498c      	ldr	r1, [pc, #560]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f8e:	4b87      	ldr	r3, [pc, #540]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	4983      	ldr	r1, [pc, #524]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fb0:	4b7e      	ldr	r3, [pc, #504]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	497b      	ldr	r1, [pc, #492]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fd2:	4b76      	ldr	r3, [pc, #472]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	4972      	ldr	r1, [pc, #456]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ff4:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	496a      	ldr	r1, [pc, #424]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002016:	4b65      	ldr	r3, [pc, #404]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002024:	4961      	ldr	r1, [pc, #388]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002038:	4b5c      	ldr	r3, [pc, #368]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002046:	4959      	ldr	r1, [pc, #356]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800205a:	4b54      	ldr	r3, [pc, #336]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	4950      	ldr	r1, [pc, #320]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800207c:	4b4b      	ldr	r3, [pc, #300]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	4948      	ldr	r1, [pc, #288]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020a4:	f023 0203 	bic.w	r2, r3, #3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	493f      	ldr	r1, [pc, #252]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d028      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020c0:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	4937      	ldr	r1, [pc, #220]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020de:	d106      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e0:	4b32      	ldr	r3, [pc, #200]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a31      	ldr	r2, [pc, #196]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ea:	60d3      	str	r3, [r2, #12]
 80020ec:	e011      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020f6:	d10c      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3304      	adds	r3, #4
 80020fc:	2101      	movs	r1, #1
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f8a4 	bl	800224c <RCCEx_PLLSAI1_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800210e:	7cfb      	ldrb	r3, [r7, #19]
 8002110:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d028      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002124:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	491f      	ldr	r1, [pc, #124]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800213c:	d106      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002148:	60d3      	str	r3, [r2, #12]
 800214a:	e011      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002154:	d10c      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	2101      	movs	r1, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f875 	bl	800224c <RCCEx_PLLSAI1_Config>
 8002162:	4603      	mov	r3, r0
 8002164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002166:	7cfb      	ldrb	r3, [r7, #19]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d02b      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800219a:	d109      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a02      	ldr	r2, [pc, #8]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a6:	60d3      	str	r3, [r2, #12]
 80021a8:	e014      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3304      	adds	r3, #4
 80021be:	2101      	movs	r1, #1
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 f843 	bl	800224c <RCCEx_PLLSAI1_Config>
 80021c6:	4603      	mov	r3, r0
 80021c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01c      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	4916      	ldr	r1, [pc, #88]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021fe:	d10c      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	2102      	movs	r1, #2
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f820 	bl	800224c <RCCEx_PLLSAI1_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002210:	7cfb      	ldrb	r3, [r7, #19]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002234:	4904      	ldr	r1, [pc, #16]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800223c:	7cbb      	ldrb	r3, [r7, #18]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000

0800224c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800225a:	4b74      	ldr	r3, [pc, #464]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d018      	beq.n	8002298 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002266:	4b71      	ldr	r3, [pc, #452]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 0203 	and.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d10d      	bne.n	8002292 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
       ||
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800227e:	4b6b      	ldr	r3, [pc, #428]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
       ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d047      	beq.n	8002322 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	e044      	b.n	8002322 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d018      	beq.n	80022d2 <RCCEx_PLLSAI1_Config+0x86>
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d825      	bhi.n	80022f0 <RCCEx_PLLSAI1_Config+0xa4>
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d002      	beq.n	80022ae <RCCEx_PLLSAI1_Config+0x62>
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d009      	beq.n	80022c0 <RCCEx_PLLSAI1_Config+0x74>
 80022ac:	e020      	b.n	80022f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022ae:	4b5f      	ldr	r3, [pc, #380]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d11d      	bne.n	80022f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022be:	e01a      	b.n	80022f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022c0:	4b5a      	ldr	r3, [pc, #360]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d116      	bne.n	80022fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d0:	e013      	b.n	80022fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022d2:	4b56      	ldr	r3, [pc, #344]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022de:	4b53      	ldr	r3, [pc, #332]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022ee:	e006      	b.n	80022fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
      break;
 80022f4:	e004      	b.n	8002300 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022f6:	bf00      	nop
 80022f8:	e002      	b.n	8002300 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022fa:	bf00      	nop
 80022fc:	e000      	b.n	8002300 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10d      	bne.n	8002322 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	430b      	orrs	r3, r1
 800231c:	4943      	ldr	r1, [pc, #268]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d17c      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002328:	4b40      	ldr	r3, [pc, #256]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a3f      	ldr	r2, [pc, #252]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 800232e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002334:	f7fe fbda 	bl	8000aec <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800233a:	e009      	b.n	8002350 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800233c:	f7fe fbd6 	bl	8000aec <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d902      	bls.n	8002350 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	73fb      	strb	r3, [r7, #15]
        break;
 800234e:	e005      	b.n	800235c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ef      	bne.n	800233c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d15f      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d110      	bne.n	800238a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002370:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6892      	ldr	r2, [r2, #8]
 8002378:	0211      	lsls	r1, r2, #8
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68d2      	ldr	r2, [r2, #12]
 800237e:	06d2      	lsls	r2, r2, #27
 8002380:	430a      	orrs	r2, r1
 8002382:	492a      	ldr	r1, [pc, #168]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002384:	4313      	orrs	r3, r2
 8002386:	610b      	str	r3, [r1, #16]
 8002388:	e027      	b.n	80023da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d112      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002390:	4b26      	ldr	r3, [pc, #152]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002398:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6892      	ldr	r2, [r2, #8]
 80023a0:	0211      	lsls	r1, r2, #8
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6912      	ldr	r2, [r2, #16]
 80023a6:	0852      	lsrs	r2, r2, #1
 80023a8:	3a01      	subs	r2, #1
 80023aa:	0552      	lsls	r2, r2, #21
 80023ac:	430a      	orrs	r2, r1
 80023ae:	491f      	ldr	r1, [pc, #124]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	610b      	str	r3, [r1, #16]
 80023b4:	e011      	b.n	80023da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6892      	ldr	r2, [r2, #8]
 80023c6:	0211      	lsls	r1, r2, #8
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6952      	ldr	r2, [r2, #20]
 80023cc:	0852      	lsrs	r2, r2, #1
 80023ce:	3a01      	subs	r2, #1
 80023d0:	0652      	lsls	r2, r2, #25
 80023d2:	430a      	orrs	r2, r1
 80023d4:	4915      	ldr	r1, [pc, #84]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a13      	ldr	r2, [pc, #76]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7fe fb81 	bl	8000aec <HAL_GetTick>
 80023ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023ec:	e009      	b.n	8002402 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023ee:	f7fe fb7d 	bl	8000aec <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d902      	bls.n	8002402 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	73fb      	strb	r3, [r7, #15]
          break;
 8002400:	e005      	b.n	800240e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ef      	beq.n	80023ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <RCCEx_PLLSAI1_Config+0x1e0>)
 800241e:	4313      	orrs	r3, r2
 8002420:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000

08002430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e040      	b.n	80024c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe f974 	bl	8000740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2224      	movs	r2, #36	; 0x24
 800245c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fb38 	bl	8002aec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f8af 	bl	80025e0 <UART_SetConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e01b      	b.n	80024c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800249a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fbb7 	bl	8002c30 <UART_CheckIdleState>
 80024c2:	4603      	mov	r3, r0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d178      	bne.n	80025d6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_UART_Transmit+0x24>
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e071      	b.n	80025d8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2221      	movs	r2, #33	; 0x21
 8002500:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002502:	f7fe faf3 	bl	8000aec <HAL_GetTick>
 8002506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002520:	d108      	bne.n	8002534 <HAL_UART_Transmit+0x68>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d104      	bne.n	8002534 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e003      	b.n	800253c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800253c:	e030      	b.n	80025a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fc19 	bl	8002d80 <UART_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e03c      	b.n	80025d8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002570:	b292      	uxth	r2, r2
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	3302      	adds	r3, #2
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	e008      	b.n	800258e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b292      	uxth	r2, r2
 8002586:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1c8      	bne.n	800253e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2200      	movs	r2, #0
 80025b4:	2140      	movs	r1, #64	; 0x40
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fbe2 	bl	8002d80 <UART_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e005      	b.n	80025d8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e4:	b08a      	sub	sp, #40	; 0x28
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	431a      	orrs	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	4313      	orrs	r3, r2
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4ba5      	ldr	r3, [pc, #660]	; (80028a4 <UART_SetConfig+0x2c4>)
 8002610:	4013      	ands	r3, r2
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002618:	430b      	orrs	r3, r1
 800261a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a9a      	ldr	r2, [pc, #616]	; (80028a8 <UART_SetConfig+0x2c8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002648:	4313      	orrs	r3, r2
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a91      	ldr	r2, [pc, #580]	; (80028ac <UART_SetConfig+0x2cc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d126      	bne.n	80026b8 <UART_SetConfig+0xd8>
 800266a:	4b91      	ldr	r3, [pc, #580]	; (80028b0 <UART_SetConfig+0x2d0>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b03      	cmp	r3, #3
 8002676:	d81b      	bhi.n	80026b0 <UART_SetConfig+0xd0>
 8002678:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <UART_SetConfig+0xa0>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	08002691 	.word	0x08002691
 8002684:	080026a1 	.word	0x080026a1
 8002688:	08002699 	.word	0x08002699
 800268c:	080026a9 	.word	0x080026a9
 8002690:	2301      	movs	r3, #1
 8002692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002696:	e0d6      	b.n	8002846 <UART_SetConfig+0x266>
 8002698:	2302      	movs	r3, #2
 800269a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800269e:	e0d2      	b.n	8002846 <UART_SetConfig+0x266>
 80026a0:	2304      	movs	r3, #4
 80026a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026a6:	e0ce      	b.n	8002846 <UART_SetConfig+0x266>
 80026a8:	2308      	movs	r3, #8
 80026aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ae:	e0ca      	b.n	8002846 <UART_SetConfig+0x266>
 80026b0:	2310      	movs	r3, #16
 80026b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026b6:	e0c6      	b.n	8002846 <UART_SetConfig+0x266>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a7d      	ldr	r2, [pc, #500]	; (80028b4 <UART_SetConfig+0x2d4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d138      	bne.n	8002734 <UART_SetConfig+0x154>
 80026c2:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <UART_SetConfig+0x2d0>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c8:	f003 030c 	and.w	r3, r3, #12
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d82d      	bhi.n	800272c <UART_SetConfig+0x14c>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <UART_SetConfig+0xf8>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	0800270d 	.word	0x0800270d
 80026dc:	0800272d 	.word	0x0800272d
 80026e0:	0800272d 	.word	0x0800272d
 80026e4:	0800272d 	.word	0x0800272d
 80026e8:	0800271d 	.word	0x0800271d
 80026ec:	0800272d 	.word	0x0800272d
 80026f0:	0800272d 	.word	0x0800272d
 80026f4:	0800272d 	.word	0x0800272d
 80026f8:	08002715 	.word	0x08002715
 80026fc:	0800272d 	.word	0x0800272d
 8002700:	0800272d 	.word	0x0800272d
 8002704:	0800272d 	.word	0x0800272d
 8002708:	08002725 	.word	0x08002725
 800270c:	2300      	movs	r3, #0
 800270e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002712:	e098      	b.n	8002846 <UART_SetConfig+0x266>
 8002714:	2302      	movs	r3, #2
 8002716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800271a:	e094      	b.n	8002846 <UART_SetConfig+0x266>
 800271c:	2304      	movs	r3, #4
 800271e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002722:	e090      	b.n	8002846 <UART_SetConfig+0x266>
 8002724:	2308      	movs	r3, #8
 8002726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800272a:	e08c      	b.n	8002846 <UART_SetConfig+0x266>
 800272c:	2310      	movs	r3, #16
 800272e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002732:	e088      	b.n	8002846 <UART_SetConfig+0x266>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a5f      	ldr	r2, [pc, #380]	; (80028b8 <UART_SetConfig+0x2d8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d125      	bne.n	800278a <UART_SetConfig+0x1aa>
 800273e:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <UART_SetConfig+0x2d0>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002748:	2b30      	cmp	r3, #48	; 0x30
 800274a:	d016      	beq.n	800277a <UART_SetConfig+0x19a>
 800274c:	2b30      	cmp	r3, #48	; 0x30
 800274e:	d818      	bhi.n	8002782 <UART_SetConfig+0x1a2>
 8002750:	2b20      	cmp	r3, #32
 8002752:	d00a      	beq.n	800276a <UART_SetConfig+0x18a>
 8002754:	2b20      	cmp	r3, #32
 8002756:	d814      	bhi.n	8002782 <UART_SetConfig+0x1a2>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <UART_SetConfig+0x182>
 800275c:	2b10      	cmp	r3, #16
 800275e:	d008      	beq.n	8002772 <UART_SetConfig+0x192>
 8002760:	e00f      	b.n	8002782 <UART_SetConfig+0x1a2>
 8002762:	2300      	movs	r3, #0
 8002764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002768:	e06d      	b.n	8002846 <UART_SetConfig+0x266>
 800276a:	2302      	movs	r3, #2
 800276c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002770:	e069      	b.n	8002846 <UART_SetConfig+0x266>
 8002772:	2304      	movs	r3, #4
 8002774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002778:	e065      	b.n	8002846 <UART_SetConfig+0x266>
 800277a:	2308      	movs	r3, #8
 800277c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002780:	e061      	b.n	8002846 <UART_SetConfig+0x266>
 8002782:	2310      	movs	r3, #16
 8002784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002788:	e05d      	b.n	8002846 <UART_SetConfig+0x266>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a4b      	ldr	r2, [pc, #300]	; (80028bc <UART_SetConfig+0x2dc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d125      	bne.n	80027e0 <UART_SetConfig+0x200>
 8002794:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <UART_SetConfig+0x2d0>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800279e:	2bc0      	cmp	r3, #192	; 0xc0
 80027a0:	d016      	beq.n	80027d0 <UART_SetConfig+0x1f0>
 80027a2:	2bc0      	cmp	r3, #192	; 0xc0
 80027a4:	d818      	bhi.n	80027d8 <UART_SetConfig+0x1f8>
 80027a6:	2b80      	cmp	r3, #128	; 0x80
 80027a8:	d00a      	beq.n	80027c0 <UART_SetConfig+0x1e0>
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d814      	bhi.n	80027d8 <UART_SetConfig+0x1f8>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <UART_SetConfig+0x1d8>
 80027b2:	2b40      	cmp	r3, #64	; 0x40
 80027b4:	d008      	beq.n	80027c8 <UART_SetConfig+0x1e8>
 80027b6:	e00f      	b.n	80027d8 <UART_SetConfig+0x1f8>
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027be:	e042      	b.n	8002846 <UART_SetConfig+0x266>
 80027c0:	2302      	movs	r3, #2
 80027c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c6:	e03e      	b.n	8002846 <UART_SetConfig+0x266>
 80027c8:	2304      	movs	r3, #4
 80027ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ce:	e03a      	b.n	8002846 <UART_SetConfig+0x266>
 80027d0:	2308      	movs	r3, #8
 80027d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027d6:	e036      	b.n	8002846 <UART_SetConfig+0x266>
 80027d8:	2310      	movs	r3, #16
 80027da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027de:	e032      	b.n	8002846 <UART_SetConfig+0x266>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a30      	ldr	r2, [pc, #192]	; (80028a8 <UART_SetConfig+0x2c8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d12a      	bne.n	8002840 <UART_SetConfig+0x260>
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <UART_SetConfig+0x2d0>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027f8:	d01a      	beq.n	8002830 <UART_SetConfig+0x250>
 80027fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027fe:	d81b      	bhi.n	8002838 <UART_SetConfig+0x258>
 8002800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002804:	d00c      	beq.n	8002820 <UART_SetConfig+0x240>
 8002806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800280a:	d815      	bhi.n	8002838 <UART_SetConfig+0x258>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <UART_SetConfig+0x238>
 8002810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002814:	d008      	beq.n	8002828 <UART_SetConfig+0x248>
 8002816:	e00f      	b.n	8002838 <UART_SetConfig+0x258>
 8002818:	2300      	movs	r3, #0
 800281a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800281e:	e012      	b.n	8002846 <UART_SetConfig+0x266>
 8002820:	2302      	movs	r3, #2
 8002822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002826:	e00e      	b.n	8002846 <UART_SetConfig+0x266>
 8002828:	2304      	movs	r3, #4
 800282a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800282e:	e00a      	b.n	8002846 <UART_SetConfig+0x266>
 8002830:	2308      	movs	r3, #8
 8002832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002836:	e006      	b.n	8002846 <UART_SetConfig+0x266>
 8002838:	2310      	movs	r3, #16
 800283a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800283e:	e002      	b.n	8002846 <UART_SetConfig+0x266>
 8002840:	2310      	movs	r3, #16
 8002842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <UART_SetConfig+0x2c8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	f040 808b 	bne.w	8002968 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002856:	2b08      	cmp	r3, #8
 8002858:	d834      	bhi.n	80028c4 <UART_SetConfig+0x2e4>
 800285a:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <UART_SetConfig+0x280>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	08002885 	.word	0x08002885
 8002864:	080028c5 	.word	0x080028c5
 8002868:	0800288d 	.word	0x0800288d
 800286c:	080028c5 	.word	0x080028c5
 8002870:	08002893 	.word	0x08002893
 8002874:	080028c5 	.word	0x080028c5
 8002878:	080028c5 	.word	0x080028c5
 800287c:	080028c5 	.word	0x080028c5
 8002880:	0800289b 	.word	0x0800289b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002884:	f7ff f9ea 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002888:	61f8      	str	r0, [r7, #28]
        break;
 800288a:	e021      	b.n	80028d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <UART_SetConfig+0x2e0>)
 800288e:	61fb      	str	r3, [r7, #28]
        break;
 8002890:	e01e      	b.n	80028d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002892:	f7ff f94b 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8002896:	61f8      	str	r0, [r7, #28]
        break;
 8002898:	e01a      	b.n	80028d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800289a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800289e:	61fb      	str	r3, [r7, #28]
        break;
 80028a0:	e016      	b.n	80028d0 <UART_SetConfig+0x2f0>
 80028a2:	bf00      	nop
 80028a4:	efff69f3 	.word	0xefff69f3
 80028a8:	40008000 	.word	0x40008000
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40004400 	.word	0x40004400
 80028b8:	40004800 	.word	0x40004800
 80028bc:	40004c00 	.word	0x40004c00
 80028c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80028ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80fa 	beq.w	8002acc <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d305      	bcc.n	80028f4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d903      	bls.n	80028fc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80028fa:	e0e7      	b.n	8002acc <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2200      	movs	r2, #0
 8002900:	461c      	mov	r4, r3
 8002902:	4615      	mov	r5, r2
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	022b      	lsls	r3, r5, #8
 800290e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002912:	0222      	lsls	r2, r4, #8
 8002914:	68f9      	ldr	r1, [r7, #12]
 8002916:	6849      	ldr	r1, [r1, #4]
 8002918:	0849      	lsrs	r1, r1, #1
 800291a:	2000      	movs	r0, #0
 800291c:	4688      	mov	r8, r1
 800291e:	4681      	mov	r9, r0
 8002920:	eb12 0a08 	adds.w	sl, r2, r8
 8002924:	eb43 0b09 	adc.w	fp, r3, r9
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002936:	4650      	mov	r0, sl
 8002938:	4659      	mov	r1, fp
 800293a:	f7fd fc4b 	bl	80001d4 <__aeabi_uldivmod>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4613      	mov	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800294c:	d308      	bcc.n	8002960 <UART_SetConfig+0x380>
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002954:	d204      	bcs.n	8002960 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	e0b5      	b.n	8002acc <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002966:	e0b1      	b.n	8002acc <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002970:	d15d      	bne.n	8002a2e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8002972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002976:	2b08      	cmp	r3, #8
 8002978:	d827      	bhi.n	80029ca <UART_SetConfig+0x3ea>
 800297a:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <UART_SetConfig+0x3a0>)
 800297c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002980:	080029a5 	.word	0x080029a5
 8002984:	080029ad 	.word	0x080029ad
 8002988:	080029b5 	.word	0x080029b5
 800298c:	080029cb 	.word	0x080029cb
 8002990:	080029bb 	.word	0x080029bb
 8002994:	080029cb 	.word	0x080029cb
 8002998:	080029cb 	.word	0x080029cb
 800299c:	080029cb 	.word	0x080029cb
 80029a0:	080029c3 	.word	0x080029c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029a4:	f7ff f95a 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 80029a8:	61f8      	str	r0, [r7, #28]
        break;
 80029aa:	e014      	b.n	80029d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029ac:	f7ff f96c 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 80029b0:	61f8      	str	r0, [r7, #28]
        break;
 80029b2:	e010      	b.n	80029d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029b4:	4b4c      	ldr	r3, [pc, #304]	; (8002ae8 <UART_SetConfig+0x508>)
 80029b6:	61fb      	str	r3, [r7, #28]
        break;
 80029b8:	e00d      	b.n	80029d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ba:	f7ff f8b7 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 80029be:	61f8      	str	r0, [r7, #28]
        break;
 80029c0:	e009      	b.n	80029d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c6:	61fb      	str	r3, [r7, #28]
        break;
 80029c8:	e005      	b.n	80029d6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80029d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d077      	beq.n	8002acc <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005a      	lsls	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	441a      	add	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d916      	bls.n	8002a26 <UART_SetConfig+0x446>
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fe:	d212      	bcs.n	8002a26 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f023 030f 	bic.w	r3, r3, #15
 8002a08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	8afb      	ldrh	r3, [r7, #22]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	8afa      	ldrh	r2, [r7, #22]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	e052      	b.n	8002acc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a2c:	e04e      	b.n	8002acc <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d827      	bhi.n	8002a86 <UART_SetConfig+0x4a6>
 8002a36:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <UART_SetConfig+0x45c>)
 8002a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3c:	08002a61 	.word	0x08002a61
 8002a40:	08002a69 	.word	0x08002a69
 8002a44:	08002a71 	.word	0x08002a71
 8002a48:	08002a87 	.word	0x08002a87
 8002a4c:	08002a77 	.word	0x08002a77
 8002a50:	08002a87 	.word	0x08002a87
 8002a54:	08002a87 	.word	0x08002a87
 8002a58:	08002a87 	.word	0x08002a87
 8002a5c:	08002a7f 	.word	0x08002a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a60:	f7ff f8fc 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002a64:	61f8      	str	r0, [r7, #28]
        break;
 8002a66:	e014      	b.n	8002a92 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a68:	f7ff f90e 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 8002a6c:	61f8      	str	r0, [r7, #28]
        break;
 8002a6e:	e010      	b.n	8002a92 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a70:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <UART_SetConfig+0x508>)
 8002a72:	61fb      	str	r3, [r7, #28]
        break;
 8002a74:	e00d      	b.n	8002a92 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a76:	f7ff f859 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8002a7a:	61f8      	str	r0, [r7, #28]
        break;
 8002a7c:	e009      	b.n	8002a92 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a82:	61fb      	str	r3, [r7, #28]
        break;
 8002a84:	e005      	b.n	8002a92 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a90:	bf00      	nop
    }

    if (pclk != 0U)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d019      	beq.n	8002acc <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	085a      	lsrs	r2, r3, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	441a      	add	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b0f      	cmp	r3, #15
 8002ab0:	d909      	bls.n	8002ac6 <UART_SetConfig+0x4e6>
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab8:	d205      	bcs.n	8002ac6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	e002      	b.n	8002acc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ad8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3728      	adds	r7, #40	; 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae6:	bf00      	nop
 8002ae8:	00f42400 	.word	0x00f42400

08002aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01a      	beq.n	8002c02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bea:	d10a      	bne.n	8002c02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
  }
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b098      	sub	sp, #96	; 0x60
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c40:	f7fd ff54 	bl	8000aec <HAL_GetTick>
 8002c44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d12e      	bne.n	8002cb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f88c 	bl	8002d80 <UART_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d021      	beq.n	8002cb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c82:	653b      	str	r3, [r7, #80]	; 0x50
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e6      	bne.n	8002c6e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e062      	b.n	8002d78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d149      	bne.n	8002d54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f856 	bl	8002d80 <UART_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d03c      	beq.n	8002d54 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	e853 3f00 	ldrex	r3, [r3]
 8002ce6:	623b      	str	r3, [r7, #32]
   return(result);
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d00:	e841 2300 	strex	r3, r2, [r1]
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e6      	bne.n	8002cda <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3308      	adds	r3, #8
 8002d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3308      	adds	r3, #8
 8002d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d2c:	61fa      	str	r2, [r7, #28]
 8002d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	69b9      	ldr	r1, [r7, #24]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	617b      	str	r3, [r7, #20]
   return(result);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e5      	bne.n	8002d0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e011      	b.n	8002d78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3758      	adds	r7, #88	; 0x58
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d90:	e049      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d045      	beq.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9a:	f7fd fea7 	bl	8000aec <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d302      	bcc.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e048      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d031      	beq.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d110      	bne.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f838 	bl	8002e4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2208      	movs	r2, #8
 8002de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e029      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e00:	d111      	bne.n	8002e26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f81e 	bl	8002e4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e00f      	b.n	8002e46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d0a6      	beq.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b095      	sub	sp, #84	; 0x54
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e74:	643b      	str	r3, [r7, #64]	; 0x40
 8002e76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e6      	bne.n	8002e56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3308      	adds	r3, #8
 8002e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	e853 3f00 	ldrex	r3, [r3]
 8002e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb0:	e841 2300 	strex	r3, r2, [r1]
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e5      	bne.n	8002e88 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d118      	bne.n	8002ef6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f023 0310 	bic.w	r3, r3, #16
 8002ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	6979      	ldr	r1, [r7, #20]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	e841 2300 	strex	r3, r2, [r1]
 8002eee:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e6      	bne.n	8002ec4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f0a:	bf00      	nop
 8002f0c:	3754      	adds	r7, #84	; 0x54
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <std>:
 8002f18:	2300      	movs	r3, #0
 8002f1a:	b510      	push	{r4, lr}
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8002f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f26:	6083      	str	r3, [r0, #8]
 8002f28:	8181      	strh	r1, [r0, #12]
 8002f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8002f2c:	81c2      	strh	r2, [r0, #14]
 8002f2e:	6183      	str	r3, [r0, #24]
 8002f30:	4619      	mov	r1, r3
 8002f32:	2208      	movs	r2, #8
 8002f34:	305c      	adds	r0, #92	; 0x5c
 8002f36:	f000 f9e5 	bl	8003304 <memset>
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <std+0x58>)
 8002f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <std+0x5c>)
 8002f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <std+0x60>)
 8002f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <std+0x64>)
 8002f48:	6323      	str	r3, [r4, #48]	; 0x30
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <std+0x68>)
 8002f4c:	6224      	str	r4, [r4, #32]
 8002f4e:	429c      	cmp	r4, r3
 8002f50:	d006      	beq.n	8002f60 <std+0x48>
 8002f52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002f56:	4294      	cmp	r4, r2
 8002f58:	d002      	beq.n	8002f60 <std+0x48>
 8002f5a:	33d0      	adds	r3, #208	; 0xd0
 8002f5c:	429c      	cmp	r4, r3
 8002f5e:	d105      	bne.n	8002f6c <std+0x54>
 8002f60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f68:	f000 ba44 	b.w	80033f4 <__retarget_lock_init_recursive>
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	bf00      	nop
 8002f70:	08003155 	.word	0x08003155
 8002f74:	08003177 	.word	0x08003177
 8002f78:	080031af 	.word	0x080031af
 8002f7c:	080031d3 	.word	0x080031d3
 8002f80:	20000114 	.word	0x20000114

08002f84 <stdio_exit_handler>:
 8002f84:	4a02      	ldr	r2, [pc, #8]	; (8002f90 <stdio_exit_handler+0xc>)
 8002f86:	4903      	ldr	r1, [pc, #12]	; (8002f94 <stdio_exit_handler+0x10>)
 8002f88:	4803      	ldr	r0, [pc, #12]	; (8002f98 <stdio_exit_handler+0x14>)
 8002f8a:	f000 b869 	b.w	8003060 <_fwalk_sglue>
 8002f8e:	bf00      	nop
 8002f90:	2000000c 	.word	0x2000000c
 8002f94:	080036f9 	.word	0x080036f9
 8002f98:	20000018 	.word	0x20000018

08002f9c <cleanup_stdio>:
 8002f9c:	6841      	ldr	r1, [r0, #4]
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <cleanup_stdio+0x34>)
 8002fa0:	4299      	cmp	r1, r3
 8002fa2:	b510      	push	{r4, lr}
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	d001      	beq.n	8002fac <cleanup_stdio+0x10>
 8002fa8:	f000 fba6 	bl	80036f8 <_fflush_r>
 8002fac:	68a1      	ldr	r1, [r4, #8]
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <cleanup_stdio+0x38>)
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	d002      	beq.n	8002fba <cleanup_stdio+0x1e>
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f000 fb9f 	bl	80036f8 <_fflush_r>
 8002fba:	68e1      	ldr	r1, [r4, #12]
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <cleanup_stdio+0x3c>)
 8002fbe:	4299      	cmp	r1, r3
 8002fc0:	d004      	beq.n	8002fcc <cleanup_stdio+0x30>
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc8:	f000 bb96 	b.w	80036f8 <_fflush_r>
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000114 	.word	0x20000114
 8002fd4:	2000017c 	.word	0x2000017c
 8002fd8:	200001e4 	.word	0x200001e4

08002fdc <global_stdio_init.part.0>:
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <global_stdio_init.part.0+0x30>)
 8002fe0:	4c0b      	ldr	r4, [pc, #44]	; (8003010 <global_stdio_init.part.0+0x34>)
 8002fe2:	4a0c      	ldr	r2, [pc, #48]	; (8003014 <global_stdio_init.part.0+0x38>)
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2104      	movs	r1, #4
 8002fec:	f7ff ff94 	bl	8002f18 <std>
 8002ff0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	2109      	movs	r1, #9
 8002ff8:	f7ff ff8e 	bl	8002f18 <std>
 8002ffc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003000:	2202      	movs	r2, #2
 8003002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003006:	2112      	movs	r1, #18
 8003008:	f7ff bf86 	b.w	8002f18 <std>
 800300c:	2000024c 	.word	0x2000024c
 8003010:	20000114 	.word	0x20000114
 8003014:	08002f85 	.word	0x08002f85

08003018 <__sfp_lock_acquire>:
 8003018:	4801      	ldr	r0, [pc, #4]	; (8003020 <__sfp_lock_acquire+0x8>)
 800301a:	f000 b9ec 	b.w	80033f6 <__retarget_lock_acquire_recursive>
 800301e:	bf00      	nop
 8003020:	20000255 	.word	0x20000255

08003024 <__sfp_lock_release>:
 8003024:	4801      	ldr	r0, [pc, #4]	; (800302c <__sfp_lock_release+0x8>)
 8003026:	f000 b9e7 	b.w	80033f8 <__retarget_lock_release_recursive>
 800302a:	bf00      	nop
 800302c:	20000255 	.word	0x20000255

08003030 <__sinit>:
 8003030:	b510      	push	{r4, lr}
 8003032:	4604      	mov	r4, r0
 8003034:	f7ff fff0 	bl	8003018 <__sfp_lock_acquire>
 8003038:	6a23      	ldr	r3, [r4, #32]
 800303a:	b11b      	cbz	r3, 8003044 <__sinit+0x14>
 800303c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003040:	f7ff bff0 	b.w	8003024 <__sfp_lock_release>
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <__sinit+0x28>)
 8003046:	6223      	str	r3, [r4, #32]
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <__sinit+0x2c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f5      	bne.n	800303c <__sinit+0xc>
 8003050:	f7ff ffc4 	bl	8002fdc <global_stdio_init.part.0>
 8003054:	e7f2      	b.n	800303c <__sinit+0xc>
 8003056:	bf00      	nop
 8003058:	08002f9d 	.word	0x08002f9d
 800305c:	2000024c 	.word	0x2000024c

08003060 <_fwalk_sglue>:
 8003060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003064:	4607      	mov	r7, r0
 8003066:	4688      	mov	r8, r1
 8003068:	4614      	mov	r4, r2
 800306a:	2600      	movs	r6, #0
 800306c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003070:	f1b9 0901 	subs.w	r9, r9, #1
 8003074:	d505      	bpl.n	8003082 <_fwalk_sglue+0x22>
 8003076:	6824      	ldr	r4, [r4, #0]
 8003078:	2c00      	cmp	r4, #0
 800307a:	d1f7      	bne.n	800306c <_fwalk_sglue+0xc>
 800307c:	4630      	mov	r0, r6
 800307e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003082:	89ab      	ldrh	r3, [r5, #12]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d907      	bls.n	8003098 <_fwalk_sglue+0x38>
 8003088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800308c:	3301      	adds	r3, #1
 800308e:	d003      	beq.n	8003098 <_fwalk_sglue+0x38>
 8003090:	4629      	mov	r1, r5
 8003092:	4638      	mov	r0, r7
 8003094:	47c0      	blx	r8
 8003096:	4306      	orrs	r6, r0
 8003098:	3568      	adds	r5, #104	; 0x68
 800309a:	e7e9      	b.n	8003070 <_fwalk_sglue+0x10>

0800309c <_puts_r>:
 800309c:	6a03      	ldr	r3, [r0, #32]
 800309e:	b570      	push	{r4, r5, r6, lr}
 80030a0:	6884      	ldr	r4, [r0, #8]
 80030a2:	4605      	mov	r5, r0
 80030a4:	460e      	mov	r6, r1
 80030a6:	b90b      	cbnz	r3, 80030ac <_puts_r+0x10>
 80030a8:	f7ff ffc2 	bl	8003030 <__sinit>
 80030ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ae:	07db      	lsls	r3, r3, #31
 80030b0:	d405      	bmi.n	80030be <_puts_r+0x22>
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	0598      	lsls	r0, r3, #22
 80030b6:	d402      	bmi.n	80030be <_puts_r+0x22>
 80030b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ba:	f000 f99c 	bl	80033f6 <__retarget_lock_acquire_recursive>
 80030be:	89a3      	ldrh	r3, [r4, #12]
 80030c0:	0719      	lsls	r1, r3, #28
 80030c2:	d513      	bpl.n	80030ec <_puts_r+0x50>
 80030c4:	6923      	ldr	r3, [r4, #16]
 80030c6:	b18b      	cbz	r3, 80030ec <_puts_r+0x50>
 80030c8:	3e01      	subs	r6, #1
 80030ca:	68a3      	ldr	r3, [r4, #8]
 80030cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030d0:	3b01      	subs	r3, #1
 80030d2:	60a3      	str	r3, [r4, #8]
 80030d4:	b9e9      	cbnz	r1, 8003112 <_puts_r+0x76>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da2e      	bge.n	8003138 <_puts_r+0x9c>
 80030da:	4622      	mov	r2, r4
 80030dc:	210a      	movs	r1, #10
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 f87b 	bl	80031da <__swbuf_r>
 80030e4:	3001      	adds	r0, #1
 80030e6:	d007      	beq.n	80030f8 <_puts_r+0x5c>
 80030e8:	250a      	movs	r5, #10
 80030ea:	e007      	b.n	80030fc <_puts_r+0x60>
 80030ec:	4621      	mov	r1, r4
 80030ee:	4628      	mov	r0, r5
 80030f0:	f000 f8b0 	bl	8003254 <__swsetup_r>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d0e7      	beq.n	80030c8 <_puts_r+0x2c>
 80030f8:	f04f 35ff 	mov.w	r5, #4294967295
 80030fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030fe:	07da      	lsls	r2, r3, #31
 8003100:	d405      	bmi.n	800310e <_puts_r+0x72>
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	059b      	lsls	r3, r3, #22
 8003106:	d402      	bmi.n	800310e <_puts_r+0x72>
 8003108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800310a:	f000 f975 	bl	80033f8 <__retarget_lock_release_recursive>
 800310e:	4628      	mov	r0, r5
 8003110:	bd70      	pop	{r4, r5, r6, pc}
 8003112:	2b00      	cmp	r3, #0
 8003114:	da04      	bge.n	8003120 <_puts_r+0x84>
 8003116:	69a2      	ldr	r2, [r4, #24]
 8003118:	429a      	cmp	r2, r3
 800311a:	dc06      	bgt.n	800312a <_puts_r+0x8e>
 800311c:	290a      	cmp	r1, #10
 800311e:	d004      	beq.n	800312a <_puts_r+0x8e>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	6022      	str	r2, [r4, #0]
 8003126:	7019      	strb	r1, [r3, #0]
 8003128:	e7cf      	b.n	80030ca <_puts_r+0x2e>
 800312a:	4622      	mov	r2, r4
 800312c:	4628      	mov	r0, r5
 800312e:	f000 f854 	bl	80031da <__swbuf_r>
 8003132:	3001      	adds	r0, #1
 8003134:	d1c9      	bne.n	80030ca <_puts_r+0x2e>
 8003136:	e7df      	b.n	80030f8 <_puts_r+0x5c>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	250a      	movs	r5, #10
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	6022      	str	r2, [r4, #0]
 8003140:	701d      	strb	r5, [r3, #0]
 8003142:	e7db      	b.n	80030fc <_puts_r+0x60>

08003144 <puts>:
 8003144:	4b02      	ldr	r3, [pc, #8]	; (8003150 <puts+0xc>)
 8003146:	4601      	mov	r1, r0
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	f7ff bfa7 	b.w	800309c <_puts_r>
 800314e:	bf00      	nop
 8003150:	20000064 	.word	0x20000064

08003154 <__sread>:
 8003154:	b510      	push	{r4, lr}
 8003156:	460c      	mov	r4, r1
 8003158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800315c:	f000 f8fc 	bl	8003358 <_read_r>
 8003160:	2800      	cmp	r0, #0
 8003162:	bfab      	itete	ge
 8003164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003166:	89a3      	ldrhlt	r3, [r4, #12]
 8003168:	181b      	addge	r3, r3, r0
 800316a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800316e:	bfac      	ite	ge
 8003170:	6563      	strge	r3, [r4, #84]	; 0x54
 8003172:	81a3      	strhlt	r3, [r4, #12]
 8003174:	bd10      	pop	{r4, pc}

08003176 <__swrite>:
 8003176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800317a:	461f      	mov	r7, r3
 800317c:	898b      	ldrh	r3, [r1, #12]
 800317e:	05db      	lsls	r3, r3, #23
 8003180:	4605      	mov	r5, r0
 8003182:	460c      	mov	r4, r1
 8003184:	4616      	mov	r6, r2
 8003186:	d505      	bpl.n	8003194 <__swrite+0x1e>
 8003188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318c:	2302      	movs	r3, #2
 800318e:	2200      	movs	r2, #0
 8003190:	f000 f8d0 	bl	8003334 <_lseek_r>
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800319a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800319e:	81a3      	strh	r3, [r4, #12]
 80031a0:	4632      	mov	r2, r6
 80031a2:	463b      	mov	r3, r7
 80031a4:	4628      	mov	r0, r5
 80031a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031aa:	f000 b8e7 	b.w	800337c <_write_r>

080031ae <__sseek>:
 80031ae:	b510      	push	{r4, lr}
 80031b0:	460c      	mov	r4, r1
 80031b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b6:	f000 f8bd 	bl	8003334 <_lseek_r>
 80031ba:	1c43      	adds	r3, r0, #1
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	bf15      	itete	ne
 80031c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80031c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031ca:	81a3      	strheq	r3, [r4, #12]
 80031cc:	bf18      	it	ne
 80031ce:	81a3      	strhne	r3, [r4, #12]
 80031d0:	bd10      	pop	{r4, pc}

080031d2 <__sclose>:
 80031d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d6:	f000 b89d 	b.w	8003314 <_close_r>

080031da <__swbuf_r>:
 80031da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031dc:	460e      	mov	r6, r1
 80031de:	4614      	mov	r4, r2
 80031e0:	4605      	mov	r5, r0
 80031e2:	b118      	cbz	r0, 80031ec <__swbuf_r+0x12>
 80031e4:	6a03      	ldr	r3, [r0, #32]
 80031e6:	b90b      	cbnz	r3, 80031ec <__swbuf_r+0x12>
 80031e8:	f7ff ff22 	bl	8003030 <__sinit>
 80031ec:	69a3      	ldr	r3, [r4, #24]
 80031ee:	60a3      	str	r3, [r4, #8]
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	071a      	lsls	r2, r3, #28
 80031f4:	d525      	bpl.n	8003242 <__swbuf_r+0x68>
 80031f6:	6923      	ldr	r3, [r4, #16]
 80031f8:	b31b      	cbz	r3, 8003242 <__swbuf_r+0x68>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	6922      	ldr	r2, [r4, #16]
 80031fe:	1a98      	subs	r0, r3, r2
 8003200:	6963      	ldr	r3, [r4, #20]
 8003202:	b2f6      	uxtb	r6, r6
 8003204:	4283      	cmp	r3, r0
 8003206:	4637      	mov	r7, r6
 8003208:	dc04      	bgt.n	8003214 <__swbuf_r+0x3a>
 800320a:	4621      	mov	r1, r4
 800320c:	4628      	mov	r0, r5
 800320e:	f000 fa73 	bl	80036f8 <_fflush_r>
 8003212:	b9e0      	cbnz	r0, 800324e <__swbuf_r+0x74>
 8003214:	68a3      	ldr	r3, [r4, #8]
 8003216:	3b01      	subs	r3, #1
 8003218:	60a3      	str	r3, [r4, #8]
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	6022      	str	r2, [r4, #0]
 8003220:	701e      	strb	r6, [r3, #0]
 8003222:	6962      	ldr	r2, [r4, #20]
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	429a      	cmp	r2, r3
 8003228:	d004      	beq.n	8003234 <__swbuf_r+0x5a>
 800322a:	89a3      	ldrh	r3, [r4, #12]
 800322c:	07db      	lsls	r3, r3, #31
 800322e:	d506      	bpl.n	800323e <__swbuf_r+0x64>
 8003230:	2e0a      	cmp	r6, #10
 8003232:	d104      	bne.n	800323e <__swbuf_r+0x64>
 8003234:	4621      	mov	r1, r4
 8003236:	4628      	mov	r0, r5
 8003238:	f000 fa5e 	bl	80036f8 <_fflush_r>
 800323c:	b938      	cbnz	r0, 800324e <__swbuf_r+0x74>
 800323e:	4638      	mov	r0, r7
 8003240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003242:	4621      	mov	r1, r4
 8003244:	4628      	mov	r0, r5
 8003246:	f000 f805 	bl	8003254 <__swsetup_r>
 800324a:	2800      	cmp	r0, #0
 800324c:	d0d5      	beq.n	80031fa <__swbuf_r+0x20>
 800324e:	f04f 37ff 	mov.w	r7, #4294967295
 8003252:	e7f4      	b.n	800323e <__swbuf_r+0x64>

08003254 <__swsetup_r>:
 8003254:	b538      	push	{r3, r4, r5, lr}
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <__swsetup_r+0xac>)
 8003258:	4605      	mov	r5, r0
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	460c      	mov	r4, r1
 800325e:	b118      	cbz	r0, 8003268 <__swsetup_r+0x14>
 8003260:	6a03      	ldr	r3, [r0, #32]
 8003262:	b90b      	cbnz	r3, 8003268 <__swsetup_r+0x14>
 8003264:	f7ff fee4 	bl	8003030 <__sinit>
 8003268:	89a3      	ldrh	r3, [r4, #12]
 800326a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800326e:	0718      	lsls	r0, r3, #28
 8003270:	d422      	bmi.n	80032b8 <__swsetup_r+0x64>
 8003272:	06d9      	lsls	r1, r3, #27
 8003274:	d407      	bmi.n	8003286 <__swsetup_r+0x32>
 8003276:	2309      	movs	r3, #9
 8003278:	602b      	str	r3, [r5, #0]
 800327a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800327e:	81a3      	strh	r3, [r4, #12]
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	e034      	b.n	80032f0 <__swsetup_r+0x9c>
 8003286:	0758      	lsls	r0, r3, #29
 8003288:	d512      	bpl.n	80032b0 <__swsetup_r+0x5c>
 800328a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800328c:	b141      	cbz	r1, 80032a0 <__swsetup_r+0x4c>
 800328e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003292:	4299      	cmp	r1, r3
 8003294:	d002      	beq.n	800329c <__swsetup_r+0x48>
 8003296:	4628      	mov	r0, r5
 8003298:	f000 f8b0 	bl	80033fc <_free_r>
 800329c:	2300      	movs	r3, #0
 800329e:	6363      	str	r3, [r4, #52]	; 0x34
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	2300      	movs	r3, #0
 80032aa:	6063      	str	r3, [r4, #4]
 80032ac:	6923      	ldr	r3, [r4, #16]
 80032ae:	6023      	str	r3, [r4, #0]
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	f043 0308 	orr.w	r3, r3, #8
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	6923      	ldr	r3, [r4, #16]
 80032ba:	b94b      	cbnz	r3, 80032d0 <__swsetup_r+0x7c>
 80032bc:	89a3      	ldrh	r3, [r4, #12]
 80032be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c6:	d003      	beq.n	80032d0 <__swsetup_r+0x7c>
 80032c8:	4621      	mov	r1, r4
 80032ca:	4628      	mov	r0, r5
 80032cc:	f000 fa62 	bl	8003794 <__smakebuf_r>
 80032d0:	89a0      	ldrh	r0, [r4, #12]
 80032d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032d6:	f010 0301 	ands.w	r3, r0, #1
 80032da:	d00a      	beq.n	80032f2 <__swsetup_r+0x9e>
 80032dc:	2300      	movs	r3, #0
 80032de:	60a3      	str	r3, [r4, #8]
 80032e0:	6963      	ldr	r3, [r4, #20]
 80032e2:	425b      	negs	r3, r3
 80032e4:	61a3      	str	r3, [r4, #24]
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	b943      	cbnz	r3, 80032fc <__swsetup_r+0xa8>
 80032ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032ee:	d1c4      	bne.n	800327a <__swsetup_r+0x26>
 80032f0:	bd38      	pop	{r3, r4, r5, pc}
 80032f2:	0781      	lsls	r1, r0, #30
 80032f4:	bf58      	it	pl
 80032f6:	6963      	ldrpl	r3, [r4, #20]
 80032f8:	60a3      	str	r3, [r4, #8]
 80032fa:	e7f4      	b.n	80032e6 <__swsetup_r+0x92>
 80032fc:	2000      	movs	r0, #0
 80032fe:	e7f7      	b.n	80032f0 <__swsetup_r+0x9c>
 8003300:	20000064 	.word	0x20000064

08003304 <memset>:
 8003304:	4402      	add	r2, r0
 8003306:	4603      	mov	r3, r0
 8003308:	4293      	cmp	r3, r2
 800330a:	d100      	bne.n	800330e <memset+0xa>
 800330c:	4770      	bx	lr
 800330e:	f803 1b01 	strb.w	r1, [r3], #1
 8003312:	e7f9      	b.n	8003308 <memset+0x4>

08003314 <_close_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4d06      	ldr	r5, [pc, #24]	; (8003330 <_close_r+0x1c>)
 8003318:	2300      	movs	r3, #0
 800331a:	4604      	mov	r4, r0
 800331c:	4608      	mov	r0, r1
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	f7fd facd 	bl	80008be <_close>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d102      	bne.n	800332e <_close_r+0x1a>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	b103      	cbz	r3, 800332e <_close_r+0x1a>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	20000250 	.word	0x20000250

08003334 <_lseek_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4d07      	ldr	r5, [pc, #28]	; (8003354 <_lseek_r+0x20>)
 8003338:	4604      	mov	r4, r0
 800333a:	4608      	mov	r0, r1
 800333c:	4611      	mov	r1, r2
 800333e:	2200      	movs	r2, #0
 8003340:	602a      	str	r2, [r5, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f7fd fae2 	bl	800090c <_lseek>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d102      	bne.n	8003352 <_lseek_r+0x1e>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	b103      	cbz	r3, 8003352 <_lseek_r+0x1e>
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	bd38      	pop	{r3, r4, r5, pc}
 8003354:	20000250 	.word	0x20000250

08003358 <_read_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4d07      	ldr	r5, [pc, #28]	; (8003378 <_read_r+0x20>)
 800335c:	4604      	mov	r4, r0
 800335e:	4608      	mov	r0, r1
 8003360:	4611      	mov	r1, r2
 8003362:	2200      	movs	r2, #0
 8003364:	602a      	str	r2, [r5, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	f7fd fa70 	bl	800084c <_read>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d102      	bne.n	8003376 <_read_r+0x1e>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	b103      	cbz	r3, 8003376 <_read_r+0x1e>
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	bd38      	pop	{r3, r4, r5, pc}
 8003378:	20000250 	.word	0x20000250

0800337c <_write_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4d07      	ldr	r5, [pc, #28]	; (800339c <_write_r+0x20>)
 8003380:	4604      	mov	r4, r0
 8003382:	4608      	mov	r0, r1
 8003384:	4611      	mov	r1, r2
 8003386:	2200      	movs	r2, #0
 8003388:	602a      	str	r2, [r5, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f7fd fa7b 	bl	8000886 <_write>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_write_r+0x1e>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_write_r+0x1e>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000250 	.word	0x20000250

080033a0 <__errno>:
 80033a0:	4b01      	ldr	r3, [pc, #4]	; (80033a8 <__errno+0x8>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000064 	.word	0x20000064

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d0d      	ldr	r5, [pc, #52]	; (80033e4 <__libc_init_array+0x38>)
 80033b0:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <__libc_init_array+0x3c>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2600      	movs	r6, #0
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	4d0b      	ldr	r5, [pc, #44]	; (80033ec <__libc_init_array+0x40>)
 80033be:	4c0c      	ldr	r4, [pc, #48]	; (80033f0 <__libc_init_array+0x44>)
 80033c0:	f000 fa56 	bl	8003870 <_init>
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	2600      	movs	r6, #0
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	080038e8 	.word	0x080038e8
 80033e8:	080038e8 	.word	0x080038e8
 80033ec:	080038e8 	.word	0x080038e8
 80033f0:	080038ec 	.word	0x080038ec

080033f4 <__retarget_lock_init_recursive>:
 80033f4:	4770      	bx	lr

080033f6 <__retarget_lock_acquire_recursive>:
 80033f6:	4770      	bx	lr

080033f8 <__retarget_lock_release_recursive>:
 80033f8:	4770      	bx	lr
	...

080033fc <_free_r>:
 80033fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033fe:	2900      	cmp	r1, #0
 8003400:	d044      	beq.n	800348c <_free_r+0x90>
 8003402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003406:	9001      	str	r0, [sp, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f1a1 0404 	sub.w	r4, r1, #4
 800340e:	bfb8      	it	lt
 8003410:	18e4      	addlt	r4, r4, r3
 8003412:	f000 f8df 	bl	80035d4 <__malloc_lock>
 8003416:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <_free_r+0x94>)
 8003418:	9801      	ldr	r0, [sp, #4]
 800341a:	6813      	ldr	r3, [r2, #0]
 800341c:	b933      	cbnz	r3, 800342c <_free_r+0x30>
 800341e:	6063      	str	r3, [r4, #4]
 8003420:	6014      	str	r4, [r2, #0]
 8003422:	b003      	add	sp, #12
 8003424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003428:	f000 b8da 	b.w	80035e0 <__malloc_unlock>
 800342c:	42a3      	cmp	r3, r4
 800342e:	d908      	bls.n	8003442 <_free_r+0x46>
 8003430:	6825      	ldr	r5, [r4, #0]
 8003432:	1961      	adds	r1, r4, r5
 8003434:	428b      	cmp	r3, r1
 8003436:	bf01      	itttt	eq
 8003438:	6819      	ldreq	r1, [r3, #0]
 800343a:	685b      	ldreq	r3, [r3, #4]
 800343c:	1949      	addeq	r1, r1, r5
 800343e:	6021      	streq	r1, [r4, #0]
 8003440:	e7ed      	b.n	800341e <_free_r+0x22>
 8003442:	461a      	mov	r2, r3
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	b10b      	cbz	r3, 800344c <_free_r+0x50>
 8003448:	42a3      	cmp	r3, r4
 800344a:	d9fa      	bls.n	8003442 <_free_r+0x46>
 800344c:	6811      	ldr	r1, [r2, #0]
 800344e:	1855      	adds	r5, r2, r1
 8003450:	42a5      	cmp	r5, r4
 8003452:	d10b      	bne.n	800346c <_free_r+0x70>
 8003454:	6824      	ldr	r4, [r4, #0]
 8003456:	4421      	add	r1, r4
 8003458:	1854      	adds	r4, r2, r1
 800345a:	42a3      	cmp	r3, r4
 800345c:	6011      	str	r1, [r2, #0]
 800345e:	d1e0      	bne.n	8003422 <_free_r+0x26>
 8003460:	681c      	ldr	r4, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	6053      	str	r3, [r2, #4]
 8003466:	440c      	add	r4, r1
 8003468:	6014      	str	r4, [r2, #0]
 800346a:	e7da      	b.n	8003422 <_free_r+0x26>
 800346c:	d902      	bls.n	8003474 <_free_r+0x78>
 800346e:	230c      	movs	r3, #12
 8003470:	6003      	str	r3, [r0, #0]
 8003472:	e7d6      	b.n	8003422 <_free_r+0x26>
 8003474:	6825      	ldr	r5, [r4, #0]
 8003476:	1961      	adds	r1, r4, r5
 8003478:	428b      	cmp	r3, r1
 800347a:	bf04      	itt	eq
 800347c:	6819      	ldreq	r1, [r3, #0]
 800347e:	685b      	ldreq	r3, [r3, #4]
 8003480:	6063      	str	r3, [r4, #4]
 8003482:	bf04      	itt	eq
 8003484:	1949      	addeq	r1, r1, r5
 8003486:	6021      	streq	r1, [r4, #0]
 8003488:	6054      	str	r4, [r2, #4]
 800348a:	e7ca      	b.n	8003422 <_free_r+0x26>
 800348c:	b003      	add	sp, #12
 800348e:	bd30      	pop	{r4, r5, pc}
 8003490:	20000258 	.word	0x20000258

08003494 <sbrk_aligned>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	4e0e      	ldr	r6, [pc, #56]	; (80034d0 <sbrk_aligned+0x3c>)
 8003498:	460c      	mov	r4, r1
 800349a:	6831      	ldr	r1, [r6, #0]
 800349c:	4605      	mov	r5, r0
 800349e:	b911      	cbnz	r1, 80034a6 <sbrk_aligned+0x12>
 80034a0:	f000 f9d6 	bl	8003850 <_sbrk_r>
 80034a4:	6030      	str	r0, [r6, #0]
 80034a6:	4621      	mov	r1, r4
 80034a8:	4628      	mov	r0, r5
 80034aa:	f000 f9d1 	bl	8003850 <_sbrk_r>
 80034ae:	1c43      	adds	r3, r0, #1
 80034b0:	d00a      	beq.n	80034c8 <sbrk_aligned+0x34>
 80034b2:	1cc4      	adds	r4, r0, #3
 80034b4:	f024 0403 	bic.w	r4, r4, #3
 80034b8:	42a0      	cmp	r0, r4
 80034ba:	d007      	beq.n	80034cc <sbrk_aligned+0x38>
 80034bc:	1a21      	subs	r1, r4, r0
 80034be:	4628      	mov	r0, r5
 80034c0:	f000 f9c6 	bl	8003850 <_sbrk_r>
 80034c4:	3001      	adds	r0, #1
 80034c6:	d101      	bne.n	80034cc <sbrk_aligned+0x38>
 80034c8:	f04f 34ff 	mov.w	r4, #4294967295
 80034cc:	4620      	mov	r0, r4
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	2000025c 	.word	0x2000025c

080034d4 <_malloc_r>:
 80034d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d8:	1ccd      	adds	r5, r1, #3
 80034da:	f025 0503 	bic.w	r5, r5, #3
 80034de:	3508      	adds	r5, #8
 80034e0:	2d0c      	cmp	r5, #12
 80034e2:	bf38      	it	cc
 80034e4:	250c      	movcc	r5, #12
 80034e6:	2d00      	cmp	r5, #0
 80034e8:	4607      	mov	r7, r0
 80034ea:	db01      	blt.n	80034f0 <_malloc_r+0x1c>
 80034ec:	42a9      	cmp	r1, r5
 80034ee:	d905      	bls.n	80034fc <_malloc_r+0x28>
 80034f0:	230c      	movs	r3, #12
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	2600      	movs	r6, #0
 80034f6:	4630      	mov	r0, r6
 80034f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80035d0 <_malloc_r+0xfc>
 8003500:	f000 f868 	bl	80035d4 <__malloc_lock>
 8003504:	f8d8 3000 	ldr.w	r3, [r8]
 8003508:	461c      	mov	r4, r3
 800350a:	bb5c      	cbnz	r4, 8003564 <_malloc_r+0x90>
 800350c:	4629      	mov	r1, r5
 800350e:	4638      	mov	r0, r7
 8003510:	f7ff ffc0 	bl	8003494 <sbrk_aligned>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	4604      	mov	r4, r0
 8003518:	d155      	bne.n	80035c6 <_malloc_r+0xf2>
 800351a:	f8d8 4000 	ldr.w	r4, [r8]
 800351e:	4626      	mov	r6, r4
 8003520:	2e00      	cmp	r6, #0
 8003522:	d145      	bne.n	80035b0 <_malloc_r+0xdc>
 8003524:	2c00      	cmp	r4, #0
 8003526:	d048      	beq.n	80035ba <_malloc_r+0xe6>
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	4631      	mov	r1, r6
 800352c:	4638      	mov	r0, r7
 800352e:	eb04 0903 	add.w	r9, r4, r3
 8003532:	f000 f98d 	bl	8003850 <_sbrk_r>
 8003536:	4581      	cmp	r9, r0
 8003538:	d13f      	bne.n	80035ba <_malloc_r+0xe6>
 800353a:	6821      	ldr	r1, [r4, #0]
 800353c:	1a6d      	subs	r5, r5, r1
 800353e:	4629      	mov	r1, r5
 8003540:	4638      	mov	r0, r7
 8003542:	f7ff ffa7 	bl	8003494 <sbrk_aligned>
 8003546:	3001      	adds	r0, #1
 8003548:	d037      	beq.n	80035ba <_malloc_r+0xe6>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	442b      	add	r3, r5
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	f8d8 3000 	ldr.w	r3, [r8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d038      	beq.n	80035ca <_malloc_r+0xf6>
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	42a2      	cmp	r2, r4
 800355c:	d12b      	bne.n	80035b6 <_malloc_r+0xe2>
 800355e:	2200      	movs	r2, #0
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	e00f      	b.n	8003584 <_malloc_r+0xb0>
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	1b52      	subs	r2, r2, r5
 8003568:	d41f      	bmi.n	80035aa <_malloc_r+0xd6>
 800356a:	2a0b      	cmp	r2, #11
 800356c:	d917      	bls.n	800359e <_malloc_r+0xca>
 800356e:	1961      	adds	r1, r4, r5
 8003570:	42a3      	cmp	r3, r4
 8003572:	6025      	str	r5, [r4, #0]
 8003574:	bf18      	it	ne
 8003576:	6059      	strne	r1, [r3, #4]
 8003578:	6863      	ldr	r3, [r4, #4]
 800357a:	bf08      	it	eq
 800357c:	f8c8 1000 	streq.w	r1, [r8]
 8003580:	5162      	str	r2, [r4, r5]
 8003582:	604b      	str	r3, [r1, #4]
 8003584:	4638      	mov	r0, r7
 8003586:	f104 060b 	add.w	r6, r4, #11
 800358a:	f000 f829 	bl	80035e0 <__malloc_unlock>
 800358e:	f026 0607 	bic.w	r6, r6, #7
 8003592:	1d23      	adds	r3, r4, #4
 8003594:	1af2      	subs	r2, r6, r3
 8003596:	d0ae      	beq.n	80034f6 <_malloc_r+0x22>
 8003598:	1b9b      	subs	r3, r3, r6
 800359a:	50a3      	str	r3, [r4, r2]
 800359c:	e7ab      	b.n	80034f6 <_malloc_r+0x22>
 800359e:	42a3      	cmp	r3, r4
 80035a0:	6862      	ldr	r2, [r4, #4]
 80035a2:	d1dd      	bne.n	8003560 <_malloc_r+0x8c>
 80035a4:	f8c8 2000 	str.w	r2, [r8]
 80035a8:	e7ec      	b.n	8003584 <_malloc_r+0xb0>
 80035aa:	4623      	mov	r3, r4
 80035ac:	6864      	ldr	r4, [r4, #4]
 80035ae:	e7ac      	b.n	800350a <_malloc_r+0x36>
 80035b0:	4634      	mov	r4, r6
 80035b2:	6876      	ldr	r6, [r6, #4]
 80035b4:	e7b4      	b.n	8003520 <_malloc_r+0x4c>
 80035b6:	4613      	mov	r3, r2
 80035b8:	e7cc      	b.n	8003554 <_malloc_r+0x80>
 80035ba:	230c      	movs	r3, #12
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	4638      	mov	r0, r7
 80035c0:	f000 f80e 	bl	80035e0 <__malloc_unlock>
 80035c4:	e797      	b.n	80034f6 <_malloc_r+0x22>
 80035c6:	6025      	str	r5, [r4, #0]
 80035c8:	e7dc      	b.n	8003584 <_malloc_r+0xb0>
 80035ca:	605b      	str	r3, [r3, #4]
 80035cc:	deff      	udf	#255	; 0xff
 80035ce:	bf00      	nop
 80035d0:	20000258 	.word	0x20000258

080035d4 <__malloc_lock>:
 80035d4:	4801      	ldr	r0, [pc, #4]	; (80035dc <__malloc_lock+0x8>)
 80035d6:	f7ff bf0e 	b.w	80033f6 <__retarget_lock_acquire_recursive>
 80035da:	bf00      	nop
 80035dc:	20000254 	.word	0x20000254

080035e0 <__malloc_unlock>:
 80035e0:	4801      	ldr	r0, [pc, #4]	; (80035e8 <__malloc_unlock+0x8>)
 80035e2:	f7ff bf09 	b.w	80033f8 <__retarget_lock_release_recursive>
 80035e6:	bf00      	nop
 80035e8:	20000254 	.word	0x20000254

080035ec <__sflush_r>:
 80035ec:	898a      	ldrh	r2, [r1, #12]
 80035ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f2:	4605      	mov	r5, r0
 80035f4:	0710      	lsls	r0, r2, #28
 80035f6:	460c      	mov	r4, r1
 80035f8:	d458      	bmi.n	80036ac <__sflush_r+0xc0>
 80035fa:	684b      	ldr	r3, [r1, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	dc05      	bgt.n	800360c <__sflush_r+0x20>
 8003600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	dc02      	bgt.n	800360c <__sflush_r+0x20>
 8003606:	2000      	movs	r0, #0
 8003608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800360c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800360e:	2e00      	cmp	r6, #0
 8003610:	d0f9      	beq.n	8003606 <__sflush_r+0x1a>
 8003612:	2300      	movs	r3, #0
 8003614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003618:	682f      	ldr	r7, [r5, #0]
 800361a:	6a21      	ldr	r1, [r4, #32]
 800361c:	602b      	str	r3, [r5, #0]
 800361e:	d032      	beq.n	8003686 <__sflush_r+0x9a>
 8003620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	075a      	lsls	r2, r3, #29
 8003626:	d505      	bpl.n	8003634 <__sflush_r+0x48>
 8003628:	6863      	ldr	r3, [r4, #4]
 800362a:	1ac0      	subs	r0, r0, r3
 800362c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800362e:	b10b      	cbz	r3, 8003634 <__sflush_r+0x48>
 8003630:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003632:	1ac0      	subs	r0, r0, r3
 8003634:	2300      	movs	r3, #0
 8003636:	4602      	mov	r2, r0
 8003638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800363a:	6a21      	ldr	r1, [r4, #32]
 800363c:	4628      	mov	r0, r5
 800363e:	47b0      	blx	r6
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	d106      	bne.n	8003654 <__sflush_r+0x68>
 8003646:	6829      	ldr	r1, [r5, #0]
 8003648:	291d      	cmp	r1, #29
 800364a:	d82b      	bhi.n	80036a4 <__sflush_r+0xb8>
 800364c:	4a29      	ldr	r2, [pc, #164]	; (80036f4 <__sflush_r+0x108>)
 800364e:	410a      	asrs	r2, r1
 8003650:	07d6      	lsls	r6, r2, #31
 8003652:	d427      	bmi.n	80036a4 <__sflush_r+0xb8>
 8003654:	2200      	movs	r2, #0
 8003656:	6062      	str	r2, [r4, #4]
 8003658:	04d9      	lsls	r1, r3, #19
 800365a:	6922      	ldr	r2, [r4, #16]
 800365c:	6022      	str	r2, [r4, #0]
 800365e:	d504      	bpl.n	800366a <__sflush_r+0x7e>
 8003660:	1c42      	adds	r2, r0, #1
 8003662:	d101      	bne.n	8003668 <__sflush_r+0x7c>
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	b903      	cbnz	r3, 800366a <__sflush_r+0x7e>
 8003668:	6560      	str	r0, [r4, #84]	; 0x54
 800366a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800366c:	602f      	str	r7, [r5, #0]
 800366e:	2900      	cmp	r1, #0
 8003670:	d0c9      	beq.n	8003606 <__sflush_r+0x1a>
 8003672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003676:	4299      	cmp	r1, r3
 8003678:	d002      	beq.n	8003680 <__sflush_r+0x94>
 800367a:	4628      	mov	r0, r5
 800367c:	f7ff febe 	bl	80033fc <_free_r>
 8003680:	2000      	movs	r0, #0
 8003682:	6360      	str	r0, [r4, #52]	; 0x34
 8003684:	e7c0      	b.n	8003608 <__sflush_r+0x1c>
 8003686:	2301      	movs	r3, #1
 8003688:	4628      	mov	r0, r5
 800368a:	47b0      	blx	r6
 800368c:	1c41      	adds	r1, r0, #1
 800368e:	d1c8      	bne.n	8003622 <__sflush_r+0x36>
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0c5      	beq.n	8003622 <__sflush_r+0x36>
 8003696:	2b1d      	cmp	r3, #29
 8003698:	d001      	beq.n	800369e <__sflush_r+0xb2>
 800369a:	2b16      	cmp	r3, #22
 800369c:	d101      	bne.n	80036a2 <__sflush_r+0xb6>
 800369e:	602f      	str	r7, [r5, #0]
 80036a0:	e7b1      	b.n	8003606 <__sflush_r+0x1a>
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a8:	81a3      	strh	r3, [r4, #12]
 80036aa:	e7ad      	b.n	8003608 <__sflush_r+0x1c>
 80036ac:	690f      	ldr	r7, [r1, #16]
 80036ae:	2f00      	cmp	r7, #0
 80036b0:	d0a9      	beq.n	8003606 <__sflush_r+0x1a>
 80036b2:	0793      	lsls	r3, r2, #30
 80036b4:	680e      	ldr	r6, [r1, #0]
 80036b6:	bf08      	it	eq
 80036b8:	694b      	ldreq	r3, [r1, #20]
 80036ba:	600f      	str	r7, [r1, #0]
 80036bc:	bf18      	it	ne
 80036be:	2300      	movne	r3, #0
 80036c0:	eba6 0807 	sub.w	r8, r6, r7
 80036c4:	608b      	str	r3, [r1, #8]
 80036c6:	f1b8 0f00 	cmp.w	r8, #0
 80036ca:	dd9c      	ble.n	8003606 <__sflush_r+0x1a>
 80036cc:	6a21      	ldr	r1, [r4, #32]
 80036ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036d0:	4643      	mov	r3, r8
 80036d2:	463a      	mov	r2, r7
 80036d4:	4628      	mov	r0, r5
 80036d6:	47b0      	blx	r6
 80036d8:	2800      	cmp	r0, #0
 80036da:	dc06      	bgt.n	80036ea <__sflush_r+0xfe>
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e2:	81a3      	strh	r3, [r4, #12]
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295
 80036e8:	e78e      	b.n	8003608 <__sflush_r+0x1c>
 80036ea:	4407      	add	r7, r0
 80036ec:	eba8 0800 	sub.w	r8, r8, r0
 80036f0:	e7e9      	b.n	80036c6 <__sflush_r+0xda>
 80036f2:	bf00      	nop
 80036f4:	dfbffffe 	.word	0xdfbffffe

080036f8 <_fflush_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	690b      	ldr	r3, [r1, #16]
 80036fc:	4605      	mov	r5, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	b913      	cbnz	r3, 8003708 <_fflush_r+0x10>
 8003702:	2500      	movs	r5, #0
 8003704:	4628      	mov	r0, r5
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	b118      	cbz	r0, 8003712 <_fflush_r+0x1a>
 800370a:	6a03      	ldr	r3, [r0, #32]
 800370c:	b90b      	cbnz	r3, 8003712 <_fflush_r+0x1a>
 800370e:	f7ff fc8f 	bl	8003030 <__sinit>
 8003712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f3      	beq.n	8003702 <_fflush_r+0xa>
 800371a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800371c:	07d0      	lsls	r0, r2, #31
 800371e:	d404      	bmi.n	800372a <_fflush_r+0x32>
 8003720:	0599      	lsls	r1, r3, #22
 8003722:	d402      	bmi.n	800372a <_fflush_r+0x32>
 8003724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003726:	f7ff fe66 	bl	80033f6 <__retarget_lock_acquire_recursive>
 800372a:	4628      	mov	r0, r5
 800372c:	4621      	mov	r1, r4
 800372e:	f7ff ff5d 	bl	80035ec <__sflush_r>
 8003732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003734:	07da      	lsls	r2, r3, #31
 8003736:	4605      	mov	r5, r0
 8003738:	d4e4      	bmi.n	8003704 <_fflush_r+0xc>
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	059b      	lsls	r3, r3, #22
 800373e:	d4e1      	bmi.n	8003704 <_fflush_r+0xc>
 8003740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003742:	f7ff fe59 	bl	80033f8 <__retarget_lock_release_recursive>
 8003746:	e7dd      	b.n	8003704 <_fflush_r+0xc>

08003748 <__swhatbuf_r>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	460c      	mov	r4, r1
 800374c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003750:	2900      	cmp	r1, #0
 8003752:	b096      	sub	sp, #88	; 0x58
 8003754:	4615      	mov	r5, r2
 8003756:	461e      	mov	r6, r3
 8003758:	da0d      	bge.n	8003776 <__swhatbuf_r+0x2e>
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	bf0c      	ite	eq
 8003766:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800376a:	2340      	movne	r3, #64	; 0x40
 800376c:	2000      	movs	r0, #0
 800376e:	6031      	str	r1, [r6, #0]
 8003770:	602b      	str	r3, [r5, #0]
 8003772:	b016      	add	sp, #88	; 0x58
 8003774:	bd70      	pop	{r4, r5, r6, pc}
 8003776:	466a      	mov	r2, sp
 8003778:	f000 f848 	bl	800380c <_fstat_r>
 800377c:	2800      	cmp	r0, #0
 800377e:	dbec      	blt.n	800375a <__swhatbuf_r+0x12>
 8003780:	9901      	ldr	r1, [sp, #4]
 8003782:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003786:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800378a:	4259      	negs	r1, r3
 800378c:	4159      	adcs	r1, r3
 800378e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003792:	e7eb      	b.n	800376c <__swhatbuf_r+0x24>

08003794 <__smakebuf_r>:
 8003794:	898b      	ldrh	r3, [r1, #12]
 8003796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003798:	079d      	lsls	r5, r3, #30
 800379a:	4606      	mov	r6, r0
 800379c:	460c      	mov	r4, r1
 800379e:	d507      	bpl.n	80037b0 <__smakebuf_r+0x1c>
 80037a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	6123      	str	r3, [r4, #16]
 80037a8:	2301      	movs	r3, #1
 80037aa:	6163      	str	r3, [r4, #20]
 80037ac:	b002      	add	sp, #8
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	ab01      	add	r3, sp, #4
 80037b2:	466a      	mov	r2, sp
 80037b4:	f7ff ffc8 	bl	8003748 <__swhatbuf_r>
 80037b8:	9900      	ldr	r1, [sp, #0]
 80037ba:	4605      	mov	r5, r0
 80037bc:	4630      	mov	r0, r6
 80037be:	f7ff fe89 	bl	80034d4 <_malloc_r>
 80037c2:	b948      	cbnz	r0, 80037d8 <__smakebuf_r+0x44>
 80037c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c8:	059a      	lsls	r2, r3, #22
 80037ca:	d4ef      	bmi.n	80037ac <__smakebuf_r+0x18>
 80037cc:	f023 0303 	bic.w	r3, r3, #3
 80037d0:	f043 0302 	orr.w	r3, r3, #2
 80037d4:	81a3      	strh	r3, [r4, #12]
 80037d6:	e7e3      	b.n	80037a0 <__smakebuf_r+0xc>
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	6020      	str	r0, [r4, #0]
 80037dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e0:	81a3      	strh	r3, [r4, #12]
 80037e2:	9b00      	ldr	r3, [sp, #0]
 80037e4:	6163      	str	r3, [r4, #20]
 80037e6:	9b01      	ldr	r3, [sp, #4]
 80037e8:	6120      	str	r0, [r4, #16]
 80037ea:	b15b      	cbz	r3, 8003804 <__smakebuf_r+0x70>
 80037ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 f81d 	bl	8003830 <_isatty_r>
 80037f6:	b128      	cbz	r0, 8003804 <__smakebuf_r+0x70>
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	431d      	orrs	r5, r3
 8003808:	81a5      	strh	r5, [r4, #12]
 800380a:	e7cf      	b.n	80037ac <__smakebuf_r+0x18>

0800380c <_fstat_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4d07      	ldr	r5, [pc, #28]	; (800382c <_fstat_r+0x20>)
 8003810:	2300      	movs	r3, #0
 8003812:	4604      	mov	r4, r0
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	f7fd f85c 	bl	80008d6 <_fstat>
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	d102      	bne.n	8003828 <_fstat_r+0x1c>
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	b103      	cbz	r3, 8003828 <_fstat_r+0x1c>
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	bd38      	pop	{r3, r4, r5, pc}
 800382a:	bf00      	nop
 800382c:	20000250 	.word	0x20000250

08003830 <_isatty_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4d06      	ldr	r5, [pc, #24]	; (800384c <_isatty_r+0x1c>)
 8003834:	2300      	movs	r3, #0
 8003836:	4604      	mov	r4, r0
 8003838:	4608      	mov	r0, r1
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	f7fd f85b 	bl	80008f6 <_isatty>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_isatty_r+0x1a>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	b103      	cbz	r3, 800384a <_isatty_r+0x1a>
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	20000250 	.word	0x20000250

08003850 <_sbrk_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4d06      	ldr	r5, [pc, #24]	; (800386c <_sbrk_r+0x1c>)
 8003854:	2300      	movs	r3, #0
 8003856:	4604      	mov	r4, r0
 8003858:	4608      	mov	r0, r1
 800385a:	602b      	str	r3, [r5, #0]
 800385c:	f7fd f864 	bl	8000928 <_sbrk>
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d102      	bne.n	800386a <_sbrk_r+0x1a>
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	b103      	cbz	r3, 800386a <_sbrk_r+0x1a>
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	20000250 	.word	0x20000250

08003870 <_init>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr

0800387c <_fini>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr
